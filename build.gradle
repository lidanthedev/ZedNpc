plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.freefair.lombok" version "8.11"
}

group = 'me.lidan'
version = '1.2'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://libraries.minecraft.net/" }
    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
    maven { url = 'https://jitpack.io' }
    flatDir { dirs 'libs' }
}

dependencies {
    implementation 'com.github.Revxrsal.Lamp:common:3.3.6'
    implementation 'com.github.Revxrsal.Lamp:brigadier:3.3.6'
    implementation 'com.github.Revxrsal.Lamp:bukkit:3.3.6'
    compileOnly("io.netty:netty-all:4.1.77.Final")
    compileOnly("org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("io.github.gonalez.znpcs:znpcs:5.1")
    compileOnly 'org.apache.logging.log4j:log4j-core:2.24.3'
    // Adventure API
    implementation "net.kyori:adventure-text-minimessage:4.19.0"
    implementation "net.kyori:adventure-text-serializer-plain:4.19.0"
    implementation "net.kyori:adventure-platform-bukkit:4.3.4"
    implementation ("dev.triumphteam:triumph-gui:3.1.11") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
}

compileJava { // Preserve parameter names in the bytecode
    options.compilerArgs += ["-parameters"]
}

shadowJar{
    archiveClassifier = null
    relocate 'revxrsal.commands', 'me.lidan.zednpc.lamp'
    relocate 'net.kyori', 'me.lidan.zednpc.adventure'
    relocate 'dev.triumphteam', 'me.lidan.zednpc.gui'
}

jar.enabled = false

build.dependsOn(shadowJar)

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            groupId = project.group
            artifactId = 'zednpc'
            version = project.version
        }
    }
}


